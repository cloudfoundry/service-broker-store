// Code generated by counterfeiter. DO NOT EDIT.
package credhub_fakes

import (
	"sync"

	"code.cloudfoundry.org/credhub-cli/credhub/auth"
	"code.cloudfoundry.org/service-broker-store/brokerstore/credhub_shims"
)

type FakeCredhubAuth struct {
	UaaClientCredentialsStub        func(string, string) auth.Builder
	uaaClientCredentialsMutex       sync.RWMutex
	uaaClientCredentialsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	uaaClientCredentialsReturns struct {
		result1 auth.Builder
	}
	uaaClientCredentialsReturnsOnCall map[int]struct {
		result1 auth.Builder
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredhubAuth) UaaClientCredentials(arg1 string, arg2 string) auth.Builder {
	fake.uaaClientCredentialsMutex.Lock()
	ret, specificReturn := fake.uaaClientCredentialsReturnsOnCall[len(fake.uaaClientCredentialsArgsForCall)]
	fake.uaaClientCredentialsArgsForCall = append(fake.uaaClientCredentialsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.UaaClientCredentialsStub
	fakeReturns := fake.uaaClientCredentialsReturns
	fake.recordInvocation("UaaClientCredentials", []interface{}{arg1, arg2})
	fake.uaaClientCredentialsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCredhubAuth) UaaClientCredentialsCallCount() int {
	fake.uaaClientCredentialsMutex.RLock()
	defer fake.uaaClientCredentialsMutex.RUnlock()
	return len(fake.uaaClientCredentialsArgsForCall)
}

func (fake *FakeCredhubAuth) UaaClientCredentialsCalls(stub func(string, string) auth.Builder) {
	fake.uaaClientCredentialsMutex.Lock()
	defer fake.uaaClientCredentialsMutex.Unlock()
	fake.UaaClientCredentialsStub = stub
}

func (fake *FakeCredhubAuth) UaaClientCredentialsArgsForCall(i int) (string, string) {
	fake.uaaClientCredentialsMutex.RLock()
	defer fake.uaaClientCredentialsMutex.RUnlock()
	argsForCall := fake.uaaClientCredentialsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCredhubAuth) UaaClientCredentialsReturns(result1 auth.Builder) {
	fake.uaaClientCredentialsMutex.Lock()
	defer fake.uaaClientCredentialsMutex.Unlock()
	fake.UaaClientCredentialsStub = nil
	fake.uaaClientCredentialsReturns = struct {
		result1 auth.Builder
	}{result1}
}

func (fake *FakeCredhubAuth) UaaClientCredentialsReturnsOnCall(i int, result1 auth.Builder) {
	fake.uaaClientCredentialsMutex.Lock()
	defer fake.uaaClientCredentialsMutex.Unlock()
	fake.UaaClientCredentialsStub = nil
	if fake.uaaClientCredentialsReturnsOnCall == nil {
		fake.uaaClientCredentialsReturnsOnCall = make(map[int]struct {
			result1 auth.Builder
		})
	}
	fake.uaaClientCredentialsReturnsOnCall[i] = struct {
		result1 auth.Builder
	}{result1}
}

func (fake *FakeCredhubAuth) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.uaaClientCredentialsMutex.RLock()
	defer fake.uaaClientCredentialsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredhubAuth) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ credhub_shims.CredhubAuth = new(FakeCredhubAuth)
